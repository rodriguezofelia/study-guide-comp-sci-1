Runtime
-------

1. When calculating the Big O notation for a particular algorithm, it's necessary
to consider the length of time it takes for the algorithm to run as the algorithm's
workload approaches infinity. What determines the **workload** of figuring out
whether your box of animal crackers contains an elephant?

Answer: The number of total animal crackers in the box


2. Order the following runtimes in descending order of efficiency (that is,
	fastest runtimes first, slowest last) as `n` approaches infinity:

   - O(1)

   - O(log n)

    - O(n)

   - O(n log n)

   - O(n^2)

   - O(2^n)




In the file called `runtime.py`, there are 5 functions.

1. What is the runtime for `string_compare`?

linear (O(n))

2. What is the runtime for `has_exotic_animals`?

linear (O(n))

3. What is the runtime for `sum_zero_1`?

linear (O(n))

4. What is the runtime for `sum_zero_2`?

quadratic (O(n^2))

5. What is the runtime for `sum_zero_3`?

quadratic (O(n^3))


Stacks and Queues
-----------------

1. In the following cases, would a stack or queue be a more appropriate data
	structure?

  - The process of loading and unloading pallets onto a flatbed truck
    A: Stack

  - Putting bottle caps on bottles of beer as they roll down an assembly line
    A: Queue


2. Describe two more situations where a queue would be an appropriate data
	structure.

  - The hackbright help queue, where the each person in queue is added to the end of hte list. The next person to be helped 
  is the one next in line. 

  - A task list that are done in order. So oldest are done first (or at the top) and go down the list. 

3. Describe two more situations where a stack would be an appropriate data
	structure.
  
  - A to do list with a priority list. So the most important things at the beginning. 

  - The back button on a webpage. So the most recent (to least recent)
 page is shown first when clicking the back button. 

Linked Lists
------------

1. Given the linked list shown in the instructions, which are the nodes? What is
the data for each node? Where is the head? Where is the tail? (Be as specific as
possible --- exactly which parts of the diagram correspond to each part? Arrows?
Boxes? Text?)

- Apple, Berry and Cherry are inside the nodes. Technically speaking, the nodes are the double boxes containing
the data and the next pointer.
- The data is the string in each of the left most of each node. 
- The head is the first note that has "Apple" in it.
- This given list doesn't keep track of a trail, but if it did it would be "Cherry."

2. What's the difference between doubly- and singly-linked lists?

- Doubly linked lists have a pointer to the right and left of the node, so before and after. 
- Singly linked lists only have a pointer to the left of the node, so after. 

3. Why is it faster to append to a linked list if we keep track of the `tail`
as an attribute?

- Because we don't have to traverse the list every time we add a node. So we'd have a O(1) runtime aka constant.

Trees
-----

1. What would be the best data structure to use for keeping track of nodes to
	visit during a Breadth First Search of a tree?

  - Queues

2. What would be the best data structure to use for keeping track of nodes to
	visit during a Depth First Search of a tree?

  - Stacks
